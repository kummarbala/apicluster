{"name":"Apicluster","tagline":"API Endpoint Library - ","body":"<p align=\"center\">\r\n    <img height=\"240\" width=\"235\" src=\"https://github.com/ramsunvtech/apicluster/raw/master/api-cluster.png\">\r\n</p>\r\n\r\n# Api Cluster\r\n**Endpoint Library**\r\n\r\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url]\r\n<!--[![Coverage Status](https://coveralls.io/repos/ramsunvtech/apicluster/badge.svg?branch=master&service=github)](https://coveralls.io/github/ramsunvtech/apicluster?branch=master) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ramsunvtech/apicluster?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)-->\r\n\r\n[![NPM](https://nodei.co/npm/apicluster.png?downloads=true&downloadRank=true)](https://nodei.co/npm/apicluster/)\r\n\r\n[downloads-image]: http://img.shields.io/npm/dm/apicluster.svg\r\n[npm-url]: https://npmjs.org/package/apicluster\r\n[npm-image]: http://img.shields.io/npm/v/apicluster.svg\r\n\r\n[travis-url]: https://travis-ci.org/ramsunvtech/apicluster\r\n[travis-image]: http://img.shields.io/travis/ramsunvtech/apicluster.svg\r\n\r\n## What is API Cluster?\r\nAPI Cluster is free and open source Javascript library for organizing endpoint in efficient way.\r\n\r\n## Why API Cluster?\r\nAdd multiple groups for versioning.  \r\nQuit messing with concatenation on URL with + operator.  \r\nAvailable in (Node) Server side and (browser) Client Side.  \r\n\r\n# Getting Started\r\n\r\n#### 1. Install api cluster globally (server side) or include the apicluster.js in your file.\r\n\r\n```sh\r\n$ npm install --global apicluster\r\n<script src=\"ApiCluster.js\"></script>\r\n```\r\n\r\n#### 2. Create Config and define endpoints.\r\n\r\n```javascript\r\nApiCluster\r\n  .defaults({\r\n      name: 'mydefault',\r\n\r\n      config: {\r\n        'employee': 'emp',\r\n        'details': 'details',\r\n        'timesheet': 'timesheet'\r\n      },\r\n\r\n      endpoints: {\r\n        \"empDetails\": \"_employee_/_details_/:empId/profile\"\r\n      }\r\n  });\r\n```\r\n\r\n#### 2. Add multiple groups.\r\n```javascript\r\nApiCluster\r\n  .defaults({\r\n      name: 'mydefault',\r\n\r\n      config: {\r\n        'employee': 'emp',\r\n        'details': 'details',\r\n        'timesheet': 'timesheet'\r\n      },\r\n\r\n      endpoints: {\r\n        \"empDetails\": \"_employee_/_details_/:empId/profile\"\r\n      }\r\n  })\r\n  .addAnother({\r\n      name: 'v1',\r\n\r\n      config: {\r\n        'employee': 'emp/v1',\r\n        'details': 'detailed',\r\n        'timesheet': 'timesheet'\r\n      },\r\n\r\n      endpoints: {\r\n        \"empDetails\": \"_employee_/_details_/:empId/profile\"\r\n      }\r\n  })\r\n  .addAnother({\r\n      name: 'v2',\r\n\r\n      config: {\r\n        'employee': 'emp/v2',\r\n        'details': 'detailed',\r\n        'timesheet': 'timesheet'\r\n      },\r\n\r\n      endpoints: {\r\n        \"empDetails\": \"_employee_/_details_/:empId/profile\"\r\n      }\r\n  });\r\n```\r\n\r\n#### 4. Get your dynamic Endpoint URL from the Configured Endpoint list from `defaults()` method.\r\n\r\n```javascript\r\nvar empDetails = ApiCluster\r\n                  .get('empDetails')\r\n                  .arg({\r\n                    'empId': 1000 \r\n                  })\r\n                  .query({\r\n                    'confirm': 'yes',\r\n                    'testAccount': 'yes'\r\n                  })\r\n                  .url();\r\n```\r\n```\r\nExpected Output: emp/details/1000/profile?confirm=yes&testAccount=yes\r\n```\r\n#### 5. Get Endpoint URL from the Configured Endpoint list from `v1` Group defined in `addAnother()` method.\r\n```javascript\r\nvar empDetails = ApiCluster\r\n                  .use('v1')\r\n                  .get('empDetails')\r\n                  .arg({\r\n                    'empId': 1000 \r\n                  })\r\n                  .query({\r\n                    'confirm': 'yes',\r\n                    'testAccount': 'yes'\r\n                  })\r\n                  .url();\r\n```\r\n```\r\nExpected Output: emp/v1/detailed/1000/profile?confirm=yes&testAccount=yes\r\n```\r\n\r\n## Example on how to use it in Node.\r\n\r\n```javascript\r\nvar http = require('http'),\r\n\tApiCluster = require('apicluster');\r\n\r\nApiCluster\r\n  .defaults({\r\n      name: 'mydefault',\r\n \r\n      config: {\r\n        'employee': 'emp',\r\n        'details': 'details',\r\n        'timesheet': 'timesheet'\r\n      },\r\n \r\n      endpoints: {\r\n        \"empDetails\": \"_employee_/_details_/:empId/profile\"\r\n      }\r\n  });\r\n\r\n//Lets define a port we want to listen to\r\nconst PORT = 9000; \r\n\r\n// Function which handles requests and send response\r\nfunction handleRequest(request, response) {\r\n\tvar empDetailURL = ApiCluster\r\n                  .get('empDetails')\r\n                  .arg({\r\n                    'empId': 1000 \r\n                  })\r\n                  .query({\r\n                    'confirm': 'yes',\r\n                    'testAccount': 'yes'\r\n                  })\r\n                  .url();\r\n    response.end('<h1>Generated Endpoint URL:<br> '\r\n    \t+ empDetailURL + '</h1>');\r\n}\r\n\r\n//Create a server\r\nvar server = http.createServer(handleRequest);\r\n\r\n//Lets start our server\r\nserver.listen(PORT, function(){\r\n    // Callback triggered when server is successfully listening. Hurray!\r\n    console.log(\"Server listening on: http://localhost:%s\", PORT);\r\n});\r\n```\r\n\r\n## Want to contribute?\r\n\r\nAnyone can help make this project better - check out the [Contributing guide](/CONTRIBUTING.md)!\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ramsunvtech/apicluster/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}